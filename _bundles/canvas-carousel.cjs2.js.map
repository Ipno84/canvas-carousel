{"version":3,"file":"canvas-carousel.cjs2.js","mappings":"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","sources":["webpack://canvas-carousel/./src/index.ts"],"sourcesContent":["import { CanvasCarouselOptions, IDeltas, ImageSizes } from \"./typings\"\n\nclass CanvasCarousel {\n    private _canvas: HTMLCanvasElement | null = null\n    private _context: CanvasRenderingContext2D | null | undefined = null\n    private _options: CanvasCarouselOptions = { selector: '', imagesPath: [] }\n    private _currentIndex: number = 0\n    private _resizeObserver: ResizeObserver | null = null\n    private _imagesCollection: HTMLImageElement[] = []\n    private touch: boolean = navigator.maxTouchPoints > 0;\n    private coors: { clientX?: number, x?: number } = {}\n    private canvasPosition: { deltaX?: number } = { deltaX: 0 }\n    private canvasRect?: DOMRect\n    private parentWidth: number | void = void 0\n    private resizeTimeout: ReturnType<typeof setTimeout> | null = null\n    private oldCanvasWidth?: number = void 0\n\n\tconstructor(options: CanvasCarouselOptions) {\n        this.onResize = this.onResize.bind(this)\n        this.onActionStart = this.onActionStart.bind(this)\n        this.onActionEnd = this.onActionEnd.bind(this)\n        this.onElementLeave = this.onElementLeave.bind(this)\n        this.onActionMove = this.onActionMove.bind(this)\n\n        this._options = options\n\n        this.onInit()\n    }\n\n    public get options(): CanvasCarouselOptions {\n        return this._options\n    }\n\n    public get canvas(): HTMLCanvasElement | null {\n        return this._canvas\n    }\n\n    public get context(): CanvasRenderingContext2D | null | undefined {\n        return this._context\n    }\n\n    public get currentIndex(): number {\n        return this._currentIndex\n    }\n\n    public get resizeObserver(): ResizeObserver | null {\n        return this._resizeObserver\n    }\n\n    public get imagesCollection(): HTMLImageElement[] {\n        return this._imagesCollection\n    }\n\n    /**\n     * It assign to internal canvas class property the proper value using the provided one or the selector\n     *\n     * @private\n     * @memberof CanvasCarousel\n     */\n    private handleCanvasAssignment(): void {\n        if(this.options.node && this.options.node instanceof HTMLCanvasElement) {\n            this._canvas = this.options.node\n        } else if(this.options.selector) {\n            this._canvas = document.querySelector(this.options.selector)\n        }\n    }\n\n    /**\n     * Asyncronously initialize elements. It's triggered in constructor right after setters and method bindings\n     * It will instantiate canvas element and its context, setup sizes of the canvas itself (using options),\n     * and fetch remote images. It also trigger a resize observer that will observe the parent node of the canvas\n     * in order to fit it if options require this behaviour\n     *\n     * @private\n     * @memberof CanvasCarousel\n     */\n    private onInit(): void {\n        this.handleCanvasAssignment()\n        this._context = this.canvas?.getContext('2d')\n\n        if(this.context) this.context.imageSmoothingEnabled = true\n        \n        this.setupSize()\n        this.prepareImages()\n\n        if(this.canvas?.parentElement) {\n            this._resizeObserver = new ResizeObserver(this.onResize);\n            this.resizeObserver?.observe(this.canvas.parentElement);\n        }\n    }\n\n    /**\n     * It will add all listeners, repeat size setup and draw image in canvas context\n     * The callback of the resize observer is triggered by default every 300 milliseconds\n     * This option can be changed during instantiation\n     *\n     * @private\n     * @memberof CanvasCarousel\n     */\n    private onResize(): void {\n        if(this.resizeTimeout) clearTimeout(this.resizeTimeout)\n        if(this.options.aspectRatio && !this.oldCanvasWidth && this.canvas?.width) {\n            this.oldCanvasWidth = this.canvas?.width\n        }\n        this.touch = navigator.maxTouchPoints > 0\n        this.resizeTimeout = setTimeout(() => {\n            this.addListeners()\n            this.setupSize()\n            this.handleCanvasReduction()\n            this.drawImages()\n        }, this.options.resizeTimeoutReaction ?? 300)\n    }\n\n    /**\n     * Normalize canvas position on x axis form responsive point of view\n     *\n     * @private\n     * @memberof CanvasCarousel\n     */\n    private handleCanvasReduction(): void {\n        if(this.options.aspectRatio && this.canvas && this.oldCanvasWidth) {\n            const diff = this.oldCanvasWidth - this.canvas.width\n            const percentage = ((diff * 100) / this.oldCanvasWidth) / 100\n            if(!this.canvasPosition.deltaX) this.canvasPosition.deltaX = 0\n            this.canvasPosition.deltaX = this.canvasPosition.deltaX - (this.canvasPosition.deltaX * percentage)\n            this.oldCanvasWidth = void 0\n        }\n    }\n\n    /**\n     * It will track the very first interaction with user\n     * After click or touch the method store in class members canvas rect and coordinates in order to use it in other event handlers.\n     * It will also start touch or mouse movement listener\n     *\n     * @private\n     * @param {(MouseEvent | TouchEvent)} e\n     * @memberof CanvasCarousel\n     */\n    private onActionStart(e: MouseEvent | TouchEvent): void {\n        e.preventDefault()\n        this.canvasRect = this.canvas?.getBoundingClientRect()\n        const event = this.touch && e instanceof TouchEvent ? e.touches[0] : e as MouseEvent\n        this.coors.clientX = (event.clientX - (this.canvasRect?.left ?? 0)) - (this.canvasPosition.deltaX ?? 0);\n        this.canvas?.addEventListener(this.touch ? 'touchmove' : 'mousemove', this.onActionMove)\n    }\n\n    /**\n     * It will be triggered on mouse or touch events end, it will completely destroy event handler\n     *\n     * @private\n     * @memberof CanvasCarousel\n     */\n    private onActionEnd(): void {\n        this.canvas?.removeEventListener(this.touch ? 'touchmove' : 'mousemove', this.onActionMove)\n    }\n\n    /**\n     * Once the touch has been canceled or mouse leave the element, it triggers the end of the behaviour\n     *\n     * @private\n     * @memberof CanvasCarousel\n     */\n    private onElementLeave(): void {\n        this.canvas?.dispatchEvent(new Event('mouseup'))\n        this.canvas?.dispatchEvent(new Event('touchend'))\n    }\n\n    /**\n     * The core of the class, it will tracks event positions in order to track delta that has to be applied during images draw.\n     * It also take care about current index (useful for external and internal purpose) and redraws images too.\n     *\n     * @private\n     * @param {(MouseEvent | TouchEvent)} e\n     * @memberof CanvasCarousel\n     */\n    private onActionMove(e: MouseEvent | TouchEvent): void {\n        e.preventDefault()\n        const lastXPosition = (-(this.canvas?.width ?? 0) * (this.options.imagesPath.length - 1))\n        const event = this.touch && e instanceof TouchEvent ? e.touches[0] : e as MouseEvent\n        this.coors.x = event.clientX - (this.canvasRect?.left ?? 0);\n        this.canvasPosition.deltaX = (this.coors.x - (this.coors.clientX ?? 0));\n        if (this.canvasPosition.deltaX > 0) {\n            this.canvasPosition.deltaX = 0;\n        } else if (this.canvasPosition.deltaX < lastXPosition ) {\n            this.canvasPosition.deltaX = lastXPosition;\n        }\n        this.setupCurrentIndex()\n        this.drawImages()\n    }\n\n    /**\n     * It set current index changes if needed\n     *\n     * @private\n     * @memberof CanvasCarousel\n     */\n    private setupCurrentIndex(): void {\n        if(this.canvas && typeof this.canvasPosition.deltaX !== 'undefined') {\n            const nextIndex = Math.round((Math.abs(this.canvasPosition.deltaX) + this.canvas.width) / this.canvas.width) - 1\n            if (nextIndex !== this.currentIndex) {\n                this._currentIndex = nextIndex\n            }\n        }\n    }\n\n    /**\n     * In order to have always clean listeners, the method will firstly destroy every used event handlers\n     * and then it will start the proper ones again\n     *\n     * @private\n     * @memberof CanvasCarousel\n     */\n    private addListeners(): void {\n        if(this.canvas) {\n            const start = this.touch ? 'touchstart' : 'mousedown'\n            const end = this.touch ? 'touchend' : 'mouseup'\n            const cancel = this.touch ? 'touchcancel' : 'mouseleave'\n\n            this.canvas.removeEventListener('touchstart', this.onActionStart)\n            this.canvas.removeEventListener('mousedown', this.onActionStart)\n            this.canvas.removeEventListener('touchend', this.onActionEnd)\n            this.canvas.removeEventListener('mouseup', this.onActionEnd)\n            this.canvas.removeEventListener('touchcancel', this.onElementLeave)\n            this.canvas.removeEventListener('mouseleave', this.onElementLeave)\n\n            this.canvas.addEventListener(start, this.onActionStart)\n            this.canvas.addEventListener(end, this.onActionEnd)\n            this.canvas.addEventListener(cancel, this.onElementLeave)\n        }\n    }\n\n    /**\n     * Helper method, useful to achieve parent node inner width for responsive purpose\n     *\n     * @private\n     * @param {HTMLElement} node\n     * @return {*}  {ImageSizes}\n     * @memberof CanvasCarousel\n     */\n    private innerDimensions(node: HTMLElement): ImageSizes {\n        const computedStyle = getComputedStyle(node)\n\n        let width = node.clientWidth\n        let height = node.clientHeight\n\n        height -= Number.parseFloat(computedStyle.paddingTop) + Number.parseFloat(computedStyle.paddingBottom)\n        width -= Number.parseFloat(computedStyle.paddingLeft) + Number.parseFloat(computedStyle.paddingRight)\n\n        return { height, width }\n    }\n\n    /**\n     * It will set canvas size using options. If aspectRatio option's provided it will use it to retrieve responsive behaviour\n     * If canvasHeight and canvasWidth are provided, instead, it will use it without responsive any behaviour\n     *\n     * @private\n     * @memberof CanvasCarousel\n     */\n    private setupSize(): void {\n        if(this.canvas && this.options.aspectRatio) {\n            const parentNode = this.canvas.parentNode as HTMLElement | undefined\n            if(parentNode) {\n                this.parentWidth = this.innerDimensions(parentNode).width\n                this.canvas.width = this.parentWidth\n                this.canvas.height = this.parentWidth * this.options.aspectRatio\n            }\n        } else if(this.canvas && this.options.canvasHeight && this.options.canvasWidth) {\n            this.canvas.width = this.options.canvasWidth\n            this.canvas.height = this.options.canvasHeight\n        }\n    }\n\n    /**\n     * It fetch remote images and draw image once every image has been downloaded\n     *\n     * @private\n     * @return {*} \n     * @memberof CanvasCarousel\n     */\n    private prepareImages(): void {\n        this.options.imagesPath.forEach((src, index) => {\n            const image = new Image()\n            image.src = src\n            image.onload = () => {\n                this._imagesCollection[index] = image\n                this.drawImages()\n            }\n        })\n        \n    }\n\n    /**\n     * This method handle image aspect ratio in order to render them properly in every slide inside the canvas element\n     *\n     * @private\n     * @param {HTMLImageElement} image\n     * @return {*}  {ImageSizes}\n     * @memberof CanvasCarousel\n     */\n    private getNormalizedImageSizes(image: HTMLImageElement): ImageSizes {\n        if(this.canvas) {\n            const imageAspectRatio = image.width / image.height\n            if(imageAspectRatio > 1) {\n                return {\n                    width: this.canvas.width,\n                    height: this.canvas.width / imageAspectRatio\n                }\n            } else {\n                return {\n                    width: this.canvas.height * imageAspectRatio,\n                    height: this.canvas.height\n                }\n            }\n        }\n        return {\n            width: 0,\n            height: 0\n        }\n    }\n\n    /**\n     * This method is used to properly set images at the very center of the slide\n     *\n     * @private\n     * @param {number} width\n     * @param {number} height\n     * @return {*}  {IDeltas}\n     * @memberof CanvasCarousel\n     */\n    private getDeltas(width: number, height: number): IDeltas {\n        if(!this.canvas) {\n            return {\n                x: 0,\n                y: 0\n            }\n        }\n        return {\n            x: (this.canvas.width - width) / 2,\n            y: (this.canvas.height - height) / 2\n        }\n    }\n\n    /**\n     * Generic method the move the canvas to the provided image index\n     *\n     * @param {number} index\n     * @memberof CanvasCarousel\n     */\n    public goToIndex(index: number): void {\n        if (this.canvas && index >= 0 && index < this.options.imagesPath.length) {\n            const delta = 0 - (this.canvas.width * index)\n            this.canvasPosition.deltaX = delta\n            this.drawImages()\n            this.setupCurrentIndex()\n        }\n    }\n\n    /**\n     * It use goToIndex method to move the canvas carousel to the next slide\n     *\n     * @memberof CanvasCarousel\n     */\n    public goToNext(): void {\n        this.goToIndex(this.currentIndex + 1)\n    }\n\n    /**\n     * It use goToIndex method to move the canvas carousel to the previous slide\n     *\n     * @memberof CanvasCarousel\n     */\n    public goToPrev(): void {\n        this.goToIndex(this.currentIndex - 1)\n    }\n\n    /**\n     * It use goToIndex method to move the canvas carousel to the first slide\n     *\n     * @memberof CanvasCarousel\n     */\n     public goToFirst(): void {\n        this.goToIndex(0)\n    }\n\n    /**\n     * It use goToIndex method to move the canvas carousel to the last slide\n     *\n     * @memberof CanvasCarousel\n     */\n     public goToLast(): void {\n        this.goToIndex(this.options.imagesPath.length - 1)\n    }\n\n    /**\n     * This method will draw images in canvas context setting properly deltas, sizes and positioning\n     *\n     * @private\n     * @memberof CanvasCarousel\n     */\n    private drawImages(): void {\n        this.context?.clearRect(0, 0, this.canvas?.width ?? 0, this.canvas?.height ?? 0);\n        this._imagesCollection.forEach((image, index) => {\n            if(this.canvas) {\n                const { width, height } = this.getNormalizedImageSizes(image)\n                const { x, y } = this.getDeltas(width, height)\n                this.context?.drawImage(\n                    image,\n                    (this.canvas.width * index) + x + (this.canvasPosition.deltaX ?? 0),\n                    y,\n                    width,\n                    height\n                )\n            }\n        })\n    }\n}\n\nexport { CanvasCarousel };\n"],"names":[],"sourceRoot":""}